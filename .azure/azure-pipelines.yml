trigger:
  - develop
  - master
  - 'refs/tags/*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  registryServerName: $(registryName).azurecr.io

stages:
  - stage: ssr
    displayName: 'Build the SSR container'
    variables:
      imageName: 'intershop-pwa-$(Build.SourceBranchName)'
      jobs:
        - job: tag
          displayName: 'set tag variable'
          steps:
            - bash: |
                echo -n "##vso[task.setvariable variable=tag]"
                if [[ $(Build.SourceBranch) =~ tags/(.*) ]]
                then
                  echo ${BASH_REMATCH[1]}
                else
                  echo $(build.buildId)
                fi
        - job: build_ssr
          displayName: 'docker build ssr'
          steps:
            - bash: |
                docker build -f $(system.defaultWorkingDirectory)/Dockerfile -t $(registryServerName)/$(imageName):$(tag) $(system.defaultWorkingDirectory) --build-arg displayVersion=$(tag)

        - job: push_ssr
          displayName: 'docker push ssr'
          steps:
            - bash: |
                docker login $(registryServerName) -u $(registryLogin) -p $(registryPassword)
                docker push $(registryServerName)/$(imageName):$(tag)
  - stage: nginx
    displayName: 'Build the nginx container'
    variables:
      imageName: 'intershop-pwa-nginx-$(Build.SourceBranchName)'
      jobs:
        - job: tag
          displayName: 'set tag variable'
          steps:
            - bash: |
                echo -n "##vso[task.setvariable variable=tag]"
                if [[ $(Build.SourceBranch) =~ tags/(.*) ]]
                then
                  echo ${BASH_REMATCH[1]}
                else
                  echo $(build.buildId)
                fi
        - job: build_nginx
          displayName: 'docker build nginx'
          steps:
            - bash: |
                docker build -f $(system.defaultWorkingDirectory)/nginx/Dockerfile -t $(registryServerName)/$(imageName):$(tag) $(system.defaultWorkingDirectory)/nginx
        - job: push_nginx
          displayName: 'docker push nginx'
          steps:
            - bash: |
                docker login $(registryServerName) -u $(registryLogin) -p $(registryPassword)
                docker push $(registryServerName)/$(imageName):$(tag)
